
; //////////////////////////////////////////////////////////////////////////////
; // Printing
; //////////////////////////////////////////////////////////////////////////////

; draw big digit from R0 to vaddr in R5 and advance R5
; DON'T SCREW R5
DrawBigDigit:
	asl	R0
	asl	R0
	asl	R0
	add	#SprNumbers45, R0
	; draw one digit
	mov	#5., R3
20$:	movb	(R0)+, R1
	; make mask
	.rept	8.
	ror	R1
	ror	R2
	asr	R2
	.endr
	; apply mask to green-blue
	mov	#^B0101010101010101, R1
	bic	R2, R1
	mov	#^B1010101010101010, R4
	com	R2
	bic	R2, R4
	bis	R1, R4
	; draw it
	mov	R4, (R5)
	add	#SCRWID, R5
	mov	R4, (R5)
	add	#SCRWID, R5
	mov	R4, (R5)
	add	#SCRWID, R5
	sob	R3, 20$
	sub	#SCRWID*15.-2, R5
	return


; //////////////////////////////////////////////////////////////////////////////
; // Drawing
; //////////////////////////////////////////////////////////////////////////////

; redraws full stakan
RedrawStakan:
	mov	#Stakan, VarAddr
	mov	#Stakan2, VarAddr2
	mov	#STAKAN_START_Y, VarY
	mov	#13., TempR3
10$:	mov	#STAKAN_START_X, VarX
	mov	#6., TempR2
20$:	mov	VarX, R1
	mov	VarY, R2
	movb	@VarAddr2, R0		; test 'removing' animation #
	beq	30$
	add	#17., R0		; we are removing figure
	br	40$
30$:	movb	@VarAddr, R0		; base tile #
	add	TilesAddition, R0
40$:	call	DrawTile
	inc	VarAddr
	inc	VarAddr2
	add	#4., VarX
	dec	TempR2
	bne	20$
	add	#2, VarAddr		; stakan is 8.*13. but drawing space is 6.*13.
	add	#2, VarAddr2
	add	#16., VarY
	dec	TempR3
	bne	10$
	return

; draw one tile
; R0 = tile #, R1 = X, R2 = Y (y-coords are 0..287, x-coords are /16pix)
DrawTile:
	; set starting vaddr
	asl	R2			; 2
	asl	R2			; 4
	asl	R2			; 8
	asl	R2			; 16
	asl	R2			; 32
	asl	R2			; 64
	add	R1, R2
	add	#VADDR, R2
	; tile offset (tiles in CPU is 64 bytes)
	asl	R0			; 2
	asl	R0			; 4
	asl	R0			; 8
	asl	R0			; 16
	asl	R0			; 32
	asl	R0			; 64
	add	#TilesCpuData, R0
	mov	#SCRWID-4, R1		; vaddr addition
	; draw it
	.rept	16.
	mov	(R0)+, (R2)+
	mov	(R0)+, (R2)+
	add	R1, R2
	.endr
	return

; draw floating figures
DrawPalka:
	mov	PalkaX, R1
	asl	R1
	asl	R1
	add	#STAKAN_START_X, R1
	mov	R1, TempR1
	mov	PalkaY, TempR2
	add	#STAKAN_START_Y, TempR2
	mov	#Palka, TempR0
	mov	#3., TempR3
10$:	mov	TempR1, R1
	mov	TempR2, R2
	movb	@TempR0, R0
	call	DrawPalkaTile
	add	#16., TempR2
	inc	TempR0
	dec	TempR3
	bne	10$
	return

; draw floating tile
; R1=X, R2=Y, R0=tile #
DrawPalkaTile:
	tst	R2			; starting with negative Y?
	blt	99$			; exit if so
	add	TilesAddition, R0
	; set starting vaddr
	mov	R2, R4
	asl	R2			; 2
	asl	R2			; 4
	asl	R2			; 8
	asl	R2			; 16
	asl	R2			; 32
	asl	R2			; 64
	add	R1, R2
	add	#VADDR, R2
	; tile offset (tiles in CPU is 64 bytes)
	asl	R0			; 2
	asl	R0			; 4
	asl	R0			; 8
	asl	R0			; 16
	asl	R0			; 32
	asl	R0			; 64
	add	#TilesCpuData, R0
	; skip undrawable
	mov	#16., R3
10$:	cmp	R4, #STAKAN_START_Y
	bge	20$
	inc	R4			; Y++
	add	#4., R0			; increase tile addr
	add	#SCRWID, R2		; increase vaddr
	dec	R3
	beq	99$			; nothing to draw
	br	10$
20$:	; draw drawable %)
	mov	#SCRWID-4, R1
30$:	mov	(R0)+, (R2)+
	mov	(R0)+, (R2)+
	add	R1, R2
	sob	R3, 30$
99$:	return

; draw black lines 
DrawBlackTile:
	tst	PalkaDY			; maybe nothing to draw?
	beq	99$			; exit if so
	mov	PalkaPrevX, R1
	asl	R1			; palka X coord is 16-pix
	asl	R1
	add	#STAKAN_START_X, R1
	mov	PalkaPrevY, R2
	mov	PalkaDY, R3
	; skip undrawable
10$:	tst	R2
	bge	20$
	inc	R2
	dec	R3
	beq	99$
	br	10$
20$:	; draw drawable	
	add	#STAKAN_START_Y, R2
	; set starting vaddr
	asl	R2			; 2
	asl	R2			; 4
	asl	R2			; 8
	asl	R2			; 16
	asl	R2			; 32
	asl	R2			; 64	
	add	R1, R2
	add	#VADDR, R2
	; draw black lines
	mov	#SCRWID-4, R1
30$:	clr	(R2)+
	clr	(R2)+
	add	R1, R2
	sob	R3, 30$
99$:	return

; draw next figure
DrawNext:
	mov	#STAKAN_START_Y, TempR2
	mov	#PalkaNext, TempR0
	mov	#3., TempR3
10$:	mov	#STAKAN_START_X+28., R1
	mov	TempR2, R2
	movb	@TempR0, R0
	add	TilesAddition, R0
	call	DrawTile
	inc	TempR0
	add	#16., TempR2
	dec	TempR3
	bne	10$
	return



TenBuf:	.word	10000., 1000., 100., 10.
Msg000:	.byte	1, 2, 3, 4, 5, 0

Bin2Dec:
	mov	#Msg000, R1
	mov	#TenBuf, R5
	mov	#4., R3
10$:	clr	R2
	mov	(R5)+, R4
20$:	cmp	R0, R4
	blo	30$
	sub	R4, R0
	inc	R2
	br	20$
30$:	movb	R2, (R1)+
	sob	R3, 10$
	movb	R0, (R1)
	return

; print score and level
PrintScore:
	; convert score to decimal bytes
	mov	Score, R0
	call	Bin2Dec
	; print them big
	mov	#STAKAN_START_Y-20.*SCRWID+STAKAN_START_X+VADDR, R5
	mov	#Msg000, VarAddr
	mov	#5., TempR3
10$:	movb	@VarAddr, R0
	call	DrawBigDigit
	inc	VarAddr
	dec	TempR3
	bne	10$
	; print level
	mov	#STAKAN_START_Y-20.*SCRWID+STAKAN_START_X+22.+VADDR, R5
	mov	Level, R0
	call	DrawBigDigit
	return


@include inc_onoff.mac

; ON - 132,94; OFF - 152,94
PrintInstrOnOff:
	mov	#SCRWID*94.+33.+VADDR, R0
	mov	#SprOnOff, R1
	tst	LevelsInc
	bne	10$
	mov	#SprOffOn, R1
10$:	mov	#9., R3
20$:	mov	#10., R2
30$:	movb	(R1)+, (R0)+
	sob	R2, 30$
	add	#SCRWID-10., R0
	sob	R3, 20$
	return



; ZX0 v2.2 standart unpacker
; original ZX0 encoder/decoder (c) Einar Saukas & Urusergi
; PDP11 version by reddie, 02-may-2024 (upd)
Unpack:	clr	R2
	movb	#200, R3
	sxt	R5
10$:	call	50$
	movb	(R0)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcs	30$
	call	50$
20$:	mov	R1, R4
	add	R5, R4
	movb	(R4)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcc	10$
30$:	mov	#-2, R2
	call	60$
	incb	R2
	bne	.+4
40$:	return
	swab	R2
	mov	R2, R5
	clrb	R5
	bisb	(R0)+, R5
	asr	R5
	mov	#1, R2
	bcs	.+6
	call	80$
	inc	R2
	br	20$
50$:	incb	R2
60$:	aslb	R3
	bne	70$
	movb	(R0)+, R3
	rolb	R3
70$:	bcs	40$
80$:	aslb	R3
	rol	R2
	br	60$


; unpacks background
DrawBackground:
	mov	#CpuBgr, R0
	mov	#40000, R1
	call	Unpack
	return

; play sound from CurrentSound addr
PlaySound:
	mov	CurrentSound, R0
	beq	99$
	mov	#^B1111111100000000, R2
10$:	movb	(R0)+, R3
	bic	R2, R3
	beq	90$
	bis	#100, @#177716
20$:	nop
	sob	R3, 20$
	movb	(R0)+, R3
	bic	R2, R3
	beq	90$
	bic	#100, @#177716
30$:	nop
	sob	R3, 30$
	br	10$
90$:	clr	CurrentSound
99$:	return

.radix 10
Snd000:	.byte	10,10,20,20,50,50,50,50,50,50
	.byte	0
Snd001:	.byte	25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
	.byte	50,50,50,50,50,50,50,50
	.byte	100,100,100,100
	.byte	200,200,200,200
	.byte	0
Snd002:	.byte	1,246,30,60,4,170,,5,8,4,10,50,240,130,22,28,3,80,200,140,50,54
	.byte	0
	.even
.radix 8