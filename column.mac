	.title	COLUMN
	.enabl	LC
	; do not use AMA here, contains relocatable code

	.asect
	.=2000	; BK-0011M - use 2000 as start addr

Start:	mtps	#200

	; relocate unpacker to 40000
	mov	#Loader, R1
	mov	#40000, R2
	mov	#LoaderEnd-Loader/2, R3
	mov	(R1)+, (R2)+
	sob	R3, .-2

	; relocate packed code to 40500
	mov	#CpuBin, R1
	mov	#40500, R2
	mov	#CpuBinEnd-CpuBin/2, R3
	mov	(R1)+, (R2)+
	sob	R3, .-2

	; unpack then
	jmp	@#40000

Loader:	; clear 1000-40000
	mov	#1000, R0
	mov	#40000-1000/2, R3
	clr	(R0)+
	sob	R3, .-2

	; unpack main code
	mov	#40500, R0
	mov	#1000, R1
	mov	R1, SP
	call	Unpack

	jmp	(SP)

; ZX0 v2.2 standart unpacker
; original ZX0 encoder/decoder (c) Einar Saukas & Urusergi
; PDP11 version by reddie, 02-may-2024 (upd)
Unpack:	clr	R2
	movb	#200, R3
	sxt	R5
10$:	call	50$
	movb	(R0)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcs	30$
	call	50$
20$:	mov	R1, R4
	add	R5, R4
	movb	(R4)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcc	10$
30$:	mov	#-2, R2
	call	60$
	incb	R2
	bne	.+4
40$:	return
	swab	R2
	mov	R2, R5
	clrb	R5
	bisb	(R0)+, R5
	asr	R5
	mov	#1, R2
	bcs	.+6
	call	80$
	inc	R2
	br	20$
50$:	incb	R2
60$:	aslb	R3
	bne	70$
	movb	(R0)+, R3
	rolb	R3
70$:	bcs	40$
80$:	aslb	R3
	rol	R2
	br	60$

LoaderEnd:

; // Main program /////////////////////////////////////////////////////////////

CpuBin:
	@includebin _cpu_lz.bin
	.even
CpuBinEnd:

	.end Start